import random
from Crypto.Cipher import AES, DES
from Crypto.PublicKey import RSA
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad
import base64
from Crypto.Cipher import PKCS1_OAEP
from sympy import isprime

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª
def generate_random_number(min_value, max_value):
    return random.randint(min_value, max_value)

def is_prime_rabin_miller(n):
    return isprime(n)

def generate_random_prime(min_value, max_value):
    while True:
        num = generate_random_number(min_value, max_value)
        if is_prime_rabin_miller(num):
            return num

# –§—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞
def caesar_encrypt_russian(text, key):
    result = ""
    alphabet_lower = "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
    alphabet_upper = "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
    for char in text:
        if char in alphabet_lower:
            idx = alphabet_lower.index(char)
            new_idx = (idx + key) % len(alphabet_lower)
            result += alphabet_lower[new_idx]
        elif char in alphabet_upper:
            idx = alphabet_upper.index(char)
            new_idx = (idx + key) % len(alphabet_upper)
            result += alphabet_upper[new_idx]
        else:
            result += char
    return result

def caesar_decrypt_russian(text, key):
    return caesar_encrypt_russian(text, -key)

def vigenere_encrypt_russian(text, keyword):
    result = ""
    alphabet_lower = "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
    alphabet_upper = "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
    keyword_lower = keyword.lower()
    j = 0
    for char in text:
        if char in alphabet_lower:
            shift = alphabet_lower.index(keyword_lower[j % len(keyword_lower)])
            idx = alphabet_lower.index(char)
            new_idx = (idx + shift) % len(alphabet_lower)
            result += alphabet_lower[new_idx]
            j += 1
        elif char in alphabet_upper:
            shift = alphabet_lower.index(keyword_lower[j % len(keyword_lower)])
            idx = alphabet_upper.index(char)
            new_idx = (idx + shift) % len(alphabet_upper)
            result += alphabet_upper[new_idx]
            j += 1
        else:
            result += char
    return result

def vigenere_decrypt_russian(text, keyword):
    result = ""
    alphabet_lower = "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
    alphabet_upper = "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
    keyword_lower = keyword.lower()
    j = 0
    for char in text:
        if char in alphabet_lower:
            shift = alphabet_lower.index(keyword_lower[j % len(keyword_lower)])
            idx = alphabet_lower.index(char)
            new_idx = (idx - shift) % len(alphabet_lower)
            result += alphabet_lower[new_idx]
            j += 1
        elif char in alphabet_upper:
            shift = alphabet_lower.index(keyword_lower[j % len(keyword_lower)])
            idx = alphabet_upper.index(char)
            new_idx = (idx - shift) % len(alphabet_upper)
            result += alphabet_upper[new_idx]
            j += 1
        else:
            result += char
    return result

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è RSA —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
def generate_rsa_keys():
    key = RSA.generate(2048)
    private_key = key.export_key().decode('utf-8')
    public_key = key.publickey().export_key().decode('utf-8')
    return private_key, public_key

def rsa_encrypt(message, public_key_str):
    try:
        public_key = RSA.import_key(public_key_str)
        cipher = PKCS1_OAEP.new(public_key)
        # –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä–∞–∑–¥–µ–ª—è–µ–º –∏—Ö –Ω–∞ —á–∞—Å—Ç–∏
        message_bytes = message.encode('utf-8')
        chunk_size = 200  # –†–∞–∑–º–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        encrypted = []
        
        for i in range(0, len(message_bytes), chunk_size):
            chunk = message_bytes[i:i+chunk_size]
            encrypted_chunk = cipher.encrypt(chunk)
            encrypted.append(base64.b64encode(encrypted_chunk).decode('utf-8'))
        
        return ":::".join(encrypted)
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"

def rsa_decrypt(encrypted_message, private_key_str):
    try:
        private_key = RSA.import_key(private_key_str)
        cipher = PKCS1_OAEP.new(private_key)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã
        encrypted_chunks = encrypted_message.split(":::")
        decrypted = []
        
        for chunk in encrypted_chunks:
            encrypted_bytes = base64.b64decode(chunk)
            decrypted_chunk = cipher.decrypt(encrypted_bytes)
            decrypted.append(decrypted_chunk)
        
        return b''.join(decrypted).decode('utf-8')
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è DES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
def generate_des_key():
    key = get_random_bytes(8)  # 8 –±–∞–π—Ç –¥–ª—è DES
    return base64.b64encode(key).decode('utf-8')

def des_encrypt(message, key_str):
    try:
        key = base64.b64decode(key_str)
        cipher = DES.new(key, DES.MODE_CBC)
        data = message.encode('utf-8')
        ct_bytes = cipher.encrypt(pad(data, DES.block_size))
        iv = base64.b64encode(cipher.iv).decode('utf-8')
        ct = base64.b64encode(ct_bytes).decode('utf-8')
        return f"{iv}:::{ct}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"

def des_decrypt(encrypted_message, key_str):
    try:
        key = base64.b64decode(key_str)
        iv, ct = encrypted_message.split(":::")
        iv = base64.b64decode(iv)
        ct = base64.b64decode(ct)
        cipher = DES.new(key, DES.MODE_CBC, iv)
        pt = unpad(cipher.decrypt(ct), DES.block_size)
        return pt.decode('utf-8')
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è AES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
def generate_aes_key():
    key = get_random_bytes(16)  # 16 –±–∞–π—Ç –¥–ª—è AES-128
    return base64.b64encode(key).decode('utf-8')

def aes_encrypt(message, key_str):
    try:
        key = base64.b64decode(key_str)
        cipher = AES.new(key, AES.MODE_CBC)
        data = message.encode('utf-8')
        ct_bytes = cipher.encrypt(pad(data, AES.block_size))
        iv = base64.b64encode(cipher.iv).decode('utf-8')
        ct = base64.b64encode(ct_bytes).decode('utf-8')
        return f"{iv}:::{ct}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"

def aes_decrypt(encrypted_message, key_str):
    try:
        key = base64.b64decode(key_str)
        iv, ct = encrypted_message.split(":::")
        iv = base64.b64decode(iv)
        ct = base64.b64decode(ct)
        cipher = AES.new(key, AES.MODE_CBC, iv)
        pt = unpad(cipher.decrypt(ct), AES.block_size)
        return pt.decode('utf-8')
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"

# –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞
def analyze_text(text):
    words = text.split()
    word_count = len(words)

    letter_total = 0
    digit_total = 0
    special_total = 0
    letter_count = {}
    digit_count = {}
    special_count = {}

    for char in text:
        if char.isalpha():
            letter_total += 1
            char_lower = char.lower()
            letter_count[char_lower] = letter_count.get(char_lower, 0) + 1
        elif char.isdigit():
            digit_total += 1
            digit_count[char] = digit_count.get(char, 0) + 1
        elif not char.isspace():
            special_total += 1
            special_count[char] = special_count.get(char, 0) + 1

    letter_freq = "\n".join([f"{letter}: {count}" for letter, count in sorted(letter_count.items())])
    digit_freq = "\n".join([f"{digit}: {count}" for digit, count in sorted(digit_count.items())])
    special_freq = "\n".join([f"{symbol}: {count}" for symbol, count in sorted(special_count.items())])

    result = (
        "üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞:\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {word_count}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤: {letter_total}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä: {digit_total}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤: {special_total}\n\n"
        "–ß–∞—Å—Ç–æ—Ç–∞ –±—É–∫–≤:\n"
        f"{letter_freq}\n\n"
        "–ß–∞—Å—Ç–æ—Ç–∞ —Ü–∏—Ñ—Ä:\n"
        f"{digit_freq}\n"
        "–ß–∞—Å—Ç–æ—Ç–∞ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤:\n"
        f"{special_freq}"
    )

    return result 

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π
def generate_password(length=12, use_uppercase=True, use_lowercase=True, 
                      use_digits=True, use_special=True):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
    
    Args:
        length: –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12)
        use_uppercase: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
        use_lowercase: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã
        use_digits: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Ü–∏—Ñ—Ä—ã
        use_special: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
    """
    charset = ""
    
    if use_uppercase:
        charset += "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    if use_lowercase:
        charset += "abcdefghijklmnopqrstuvwxyz"
    if use_digits:
        charset += "0123456789"
    if use_special:
        charset += "!@#$%^&*()-_=+[]{}|;:,.<>?/~"
    
    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ —Ç–∏–ø–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –≤—ã–±—Ä–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ
    if not charset:
        charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}|;:,.<>?/~"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    if length <= 0:
        length = 12
    
    password = ''.join(random.choice(charset) for _ in range(length))
    return password 

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ —Å—á–∏—Å–ª–µ–Ω–∏—è
def decimal_to_base(decimal_num, base):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –∏–∑ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è
    """
    try:
        decimal_num = int(decimal_num)
        if base == 2:
            return bin(decimal_num)[2:]  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å '0b'
        elif base == 8:
            return oct(decimal_num)[2:]  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å '0o'
        elif base == 16:
            return hex(decimal_num)[2:].upper()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å '0x' –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
        else:
            return f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—á–∏—Å–ª–µ–Ω–∏—è: {base}"
    except ValueError:
        return "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ"

def base_to_decimal(number, base):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é
    """
    try:
        if base == 2:
            return int(number, 2)
        elif base == 8:
            return int(number, 8)
        elif base == 16:
            return int(number, 16)
        else:
            return f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—á–∏—Å–ª–µ–Ω–∏—è: {base}"
    except ValueError:
        return f"–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –≤ —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º {base}" 
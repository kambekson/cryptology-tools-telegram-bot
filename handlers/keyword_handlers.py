from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter

from keyboards import get_main_keyboard, get_keyword_cipher_keyboard
from states import KeywordCipher
from crypto_utils import vigenere_encrypt_russian, vigenere_decrypt_russian

async def keyword_cipher_menu(message: types.Message, state: FSMContext):
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
    await state.clear()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(KeywordCipher.choosing_mode)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–ª—è —à–∏—Ñ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞:",
                       reply_markup=get_keyword_cipher_keyboard())

async def keyword_encryption_start(message: types.Message, state: FSMContext):
    await state.set_state(KeywordCipher.waiting_for_text_encrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ):", reply_markup=get_main_keyboard())

async def process_keyword_text_encrypt(message: types.Message, state: FSMContext):
    await state.update_data(keyword_text=message.text)
    await state.set_state(KeywordCipher.waiting_for_keyword_encrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")

async def process_keyword_encrypt(message: types.Message, state: FSMContext):
    keyword = message.text.strip()
    data = await state.get_data()
    text = data.get("keyword_text")
    result = vigenere_encrypt_russian(text, keyword)
    await message.reply(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {result}", reply_markup=get_main_keyboard())
    await state.clear()

async def keyword_decryption_start(message: types.Message, state: FSMContext):
    await state.set_state(KeywordCipher.waiting_for_text_decrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ):", reply_markup=get_main_keyboard())

async def process_keyword_text_decrypt(message: types.Message, state: FSMContext):
    await state.update_data(keyword_text=message.text)
    await state.set_state(KeywordCipher.waiting_for_keyword_decrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")

async def process_keyword_decrypt(message: types.Message, state: FSMContext):
    keyword = message.text.strip()
    data = await state.get_data()
    text = data.get("keyword_text")
    result = vigenere_decrypt_russian(text, keyword)
    await message.reply(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {result}", reply_markup=get_main_keyboard())
    await state.clear()

def register_keyword_handlers(dp):
    dp.message.register(keyword_cipher_menu, lambda message: message.text == "üîë –®–∏—Ñ—Ä —Å –∫–æ–¥–æ–≤—ã–º —Å–ª–æ–≤–æ–º")
    dp.message.register(keyword_encryption_start, 
                       lambda message: message.text == "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", 
                       StateFilter(KeywordCipher.choosing_mode))
    dp.message.register(process_keyword_text_encrypt, StateFilter(KeywordCipher.waiting_for_text_encrypt))
    dp.message.register(process_keyword_encrypt, StateFilter(KeywordCipher.waiting_for_keyword_encrypt))
    dp.message.register(keyword_decryption_start, 
                       lambda message: message.text == "–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", 
                       StateFilter(KeywordCipher.choosing_mode))
    dp.message.register(process_keyword_text_decrypt, StateFilter(KeywordCipher.waiting_for_text_decrypt))
    dp.message.register(process_keyword_decrypt, StateFilter(KeywordCipher.waiting_for_keyword_decrypt))
    
    return dp 
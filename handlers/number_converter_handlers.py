from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from keyboards import get_main_keyboard, get_number_converter_keyboard, get_base_keyboard
from states import NumberConverter
from crypto_utils import decimal_to_base, base_to_decimal

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ —Å–∏—Å—Ç–µ–º —Å—á–∏—Å–ª–µ–Ω–∏—è
async def cmd_number_converter(message: types.Message, state: FSMContext):
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º —Å—á–∏—Å–ª–µ–Ω–∏—è:",
        reply_markup=get_number_converter_keyboard()
    )
    await state.set_state(NumberConverter.choosing_mode)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
async def number_converter_mode(message: types.Message, state: FSMContext):
    if message.text == "–ò–∑ 10-–π –≤ –¥—Ä—É–≥—É—é":
        await state.update_data(mode="dec_to_base")
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(NumberConverter.waiting_for_decimal_input)
    elif message.text == "–ò–∑ –¥—Ä—É–≥–æ–π –≤ 10-—é":
        await state.update_data(mode="base_to_dec")
        await message.reply(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è:",
            reply_markup=get_base_keyboard()
        )
        await state.set_state(NumberConverter.waiting_for_base_input)
    else:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞",
            reply_markup=get_number_converter_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —á–∏—Å–ª–∞
async def process_decimal_input(message: types.Message, state: FSMContext):
    try:
        decimal_num = int(message.text)
        await state.update_data(decimal_num=decimal_num)
        await message.reply(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è:",
            reply_markup=get_base_keyboard()
        )
        await state.set_state(NumberConverter.waiting_for_base_output)
    except ValueError:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è.",
            reply_markup=types.ReplyKeyboardRemove()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏—Å—Ö–æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è
async def process_base_input(message: types.Message, state: FSMContext):
    if message.text == "2 (–¥–≤–æ–∏—á–Ω–∞—è)":
        await state.update_data(input_base=2)
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–≤–æ–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ 0 –∏ 1):",
            reply_markup=types.ReplyKeyboardRemove()
        )
    elif message.text == "8 (–≤–æ—Å—å–º–µ—Ä–∏—á–Ω–∞—è)":
        await state.update_data(input_base=8)
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –≤–æ—Å—å–º–µ—Ä–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã –æ—Ç 0 –¥–æ 7):",
            reply_markup=types.ReplyKeyboardRemove()
        )
    elif message.text == "16 (—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–∞—è)":
        await state.update_data(input_base=16)
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã –æ—Ç 0 –¥–æ 9 –∏ –±—É–∫–≤—ã –æ—Ç A –¥–æ F):",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
            reply_markup=get_base_keyboard()
        )
        return
    
    await state.set_state(NumberConverter.waiting_for_base_output)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è –∏ –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞
async def process_base_output(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    mode = user_data.get("mode")
    
    if mode == "dec_to_base":
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é
        decimal_num = user_data.get("decimal_num")
        
        if message.text == "2 (–¥–≤–æ–∏—á–Ω–∞—è)":
            result = decimal_to_base(decimal_num, 2)
            base_name = "–¥–≤–æ–∏—á–Ω—É—é"
            base = 2
        elif message.text == "8 (–≤–æ—Å—å–º–µ—Ä–∏—á–Ω–∞—è)":
            result = decimal_to_base(decimal_num, 8)
            base_name = "–≤–æ—Å—å–º–µ—Ä–∏—á–Ω—É—é"
            base = 8
        elif message.text == "16 (—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–∞—è)":
            result = decimal_to_base(decimal_num, 16)
            base_name = "—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—É—é"
            base = 16
        else:
            await message.reply(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
                reply_markup=get_base_keyboard()
            )
            return
        
        await message.reply(
            f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</b>\n\n"
            f"–ò—Å—Ö–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ (–¥–µ—Å—è—Ç–∏—á–Ω–æ–µ): <code>{decimal_num}</code>\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç ({base_name}): <code>{result}</code>\n\n"
            f"–§–æ—Ä–º–∞—Ç: <code>{decimal_num}‚ÇÅ‚ÇÄ = {result}_{base}</code>",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_keyboard()
        )
        
    elif mode == "base_to_dec":
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é
        input_base = user_data.get("input_base")
        
        try:
            if input_base == 2:
                for char in message.text:
                    if char not in "01":
                        raise ValueError("–î–≤–æ–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã 0 –∏ 1")
                base_name = "–¥–≤–æ–∏—á–Ω–æ–π"
            elif input_base == 8:
                for char in message.text:
                    if char not in "01234567":
                        raise ValueError("–í–æ—Å—å–º–µ—Ä–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –æ—Ç 0 –¥–æ 7")
                base_name = "–≤–æ—Å—å–º–µ—Ä–∏—á–Ω–æ–π"
            elif input_base == 16:
                for char in message.text.upper():
                    if char not in "0123456789ABCDEF":
                        raise ValueError("–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –æ—Ç 0 –¥–æ 9 –∏ –±—É–∫–≤—ã –æ—Ç A –¥–æ F")
                base_name = "—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–π"
            
            result = base_to_decimal(message.text, input_base)
            
            await message.reply(
                f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</b>\n\n"
                f"–ò—Å—Ö–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ ({base_name}): <code>{message.text}</code>\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç (–¥–µ—Å—è—Ç–∏—á–Ω–æ–µ): <code>{result}</code>\n\n"
                f"–§–æ—Ä–º–∞—Ç: <code>{message.text}_{input_base} = {result}‚ÇÅ‚ÇÄ</code>",
                parse_mode=ParseMode.HTML,
                reply_markup=get_main_keyboard()
            )
        except ValueError as e:
            await message.reply(
                f"–û—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=types.ReplyKeyboardRemove()
            )
            return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_number_converter_handlers(dp):
    dp.message.register(cmd_number_converter, lambda message: message.text == "üî¢ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å–∏—Å—Ç–µ–º —Å—á–∏—Å–ª–µ–Ω–∏—è")
    dp.message.register(number_converter_mode, NumberConverter.choosing_mode)
    dp.message.register(process_decimal_input, NumberConverter.waiting_for_decimal_input)
    dp.message.register(process_base_input, NumberConverter.waiting_for_base_input)
    dp.message.register(process_base_output, NumberConverter.waiting_for_base_output)
    
    return dp 

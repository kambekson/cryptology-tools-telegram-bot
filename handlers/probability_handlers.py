from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
import random

from keyboards import (
    get_main_keyboard,
    get_probability_game_keyboard,
    get_coin_keyboard,
    get_dice_keyboard,
    get_even_odd_keyboard
)
from states import ProbabilityGame

async def probability_game_menu(message: types.Message, state: FSMContext):
    await state.set_state(ProbabilityGame.choosing_game)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=get_probability_game_keyboard())

# –ú–æ–Ω–µ—Ç–∫–∞
async def coin_game(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É:", reply_markup=get_coin_keyboard())

async def toss_coin(message: types.Message, state: FSMContext):
    result = random.choice(["–û—Ä—ë–ª ü¶Ö", "–†–µ—à–∫–∞ üí∞"])
    await message.answer(f"–í—ã–ø–∞–ª–æ: {result}", reply_markup=get_coin_keyboard())

# –ö–æ—Å—Ç–∏
async def dice_game(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –∫–∏–Ω—É—Ç—å –∫–æ—Å—Ç–∏:", reply_markup=get_dice_keyboard())

async def roll_dice(message: types.Message, state: FSMContext):
    die1 = random.randint(1, 6)
    die2 = random.randint(1, 6)
    await message.answer(f"–ö–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–ª–∏: üé≤ {die1} –∏ üé≤ {die2}", reply_markup=get_dice_keyboard())

# –ß–µ—Ç/–Ω–µ—á–µ—Ç
async def even_odd_game(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –∫—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É:", reply_markup=get_even_odd_keyboard())

async def spin_even_odd(message: types.Message, state: FSMContext):
    number = random.randint(1, 100)
    parity = "–ß–µ—Ç–Ω–æ–µ ‚öñÔ∏è" if number % 2 == 0 else "–ù–µ—á–µ—Ç–Ω–æ–µ üåÄ"
    await message.answer(f"–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {number} ‚Äî {parity}", reply_markup=get_even_odd_keyboard())

def register_probability_handlers(dp):
    dp.message.register(probability_game_menu, lambda m: m.text == "üé≤ –ò–≥—Ä–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏")
    dp.message.register(coin_game, lambda m: m.text == "ü™ô –ú–æ–Ω–µ—Ç–∫–∞", StateFilter(ProbabilityGame.choosing_game))
    dp.message.register(toss_coin, lambda m: m.text == "–ö–∏–Ω—É—Ç—å –º–æ–Ω–µ—Ç–∫—É")
    dp.message.register(dice_game, lambda m: m.text == "üé≤ –ö–æ—Å—Ç–∏", StateFilter(ProbabilityGame.choosing_game))
    dp.message.register(roll_dice, lambda m: m.text == "–ö–∏–Ω—É—Ç—å –∫–æ—Å—Ç–∏")
    dp.message.register(even_odd_game, lambda m: m.text == "üîÑ –ß–µ—Ç/–Ω–µ—á–µ—Ç", StateFilter(ProbabilityGame.choosing_game))
    dp.message.register(spin_even_odd, lambda m: m.text == "–ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É")
    return dp
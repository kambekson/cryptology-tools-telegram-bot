from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from keyboards import get_main_keyboard, get_password_options_keyboard, get_password_customization_keyboard
from states import PasswordGenerator
from crypto_utils import generate_password

async def password_generator_start(message: types.Message, state: FSMContext):
    await message.reply(
        "üîë <b>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∞—Ä–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_password_options_keyboard()
    )
    await state.clear()

async def generate_simple_password(message: types.Message, state: FSMContext):
    password = generate_password(length=8, use_uppercase=False, use_special=False)
    await message.reply(
        f"üîë <b>–í–∞—à –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å:</b>\n\n"
        f"<code>{password}</code>\n\n"
        f"–î–ª–∏–Ω–∞: 8 —Å–∏–º–≤–æ–ª–æ–≤\n"
        f"–°–æ–¥–µ—Ä–∂–∏—Ç: —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã",
        parse_mode=ParseMode.HTML,
        reply_markup=get_password_options_keyboard()
    )

async def generate_complex_password(message: types.Message, state: FSMContext):
    password = generate_password(length=16)
    await message.reply(
        f"üîë <b>–í–∞—à —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å:</b>\n\n"
        f"<code>{password}</code>\n\n"
        f"–î–ª–∏–Ω–∞: 16 —Å–∏–º–≤–æ–ª–æ–≤\n"
        f"–°–æ–¥–µ—Ä–∂–∏—Ç: –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã",
        parse_mode=ParseMode.HTML,
        reply_markup=get_password_options_keyboard()
    )

async def customize_password_start(message: types.Message, state: FSMContext):
    await message.reply(
        "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–æ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è (–æ—Ç 4 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤):",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(PasswordGenerator.waiting_for_length)

async def process_password_length(message: types.Message, state: FSMContext):
    try:
        length = int(message.text.strip())
        if length < 4 or length > 32:
            await message.reply(
                "‚ùå –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 4 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return
        await state.update_data(length=length, 
                               use_uppercase=True, 
                               use_lowercase=True, 
                               use_digits=True, 
                               use_special=True)
        await message.reply(
            f"‚úÖ –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {length} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Ä–æ–ª—è:",
            reply_markup=get_password_customization_keyboard()
        )
        await state.set_state(PasswordGenerator.waiting_for_options)
    except ValueError:
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 4 –¥–æ 32."
        )

async def process_uppercase_option(message: types.Message, state: FSMContext):
    data = await state.get_data()
    data['use_uppercase'] = True
    await state.update_data(data)
    await message.reply("‚úÖ –ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã", 
                        reply_markup=get_password_customization_keyboard())

async def process_no_uppercase_option(message: types.Message, state: FSMContext):
    data = await state.get_data()
    data['use_uppercase'] = False
    await state.update_data(data)
    await message.reply("‚úÖ –ü–∞—Ä–æ–ª—å –Ω–µ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã", 
                        reply_markup=get_password_customization_keyboard())

async def process_digits_option(message: types.Message, state: FSMContext):
    data = await state.get_data()
    data['use_digits'] = True
    await state.update_data(data)
    await message.reply("‚úÖ –ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã", 
                        reply_markup=get_password_customization_keyboard())

async def process_no_digits_option(message: types.Message, state: FSMContext):
    data = await state.get_data()
    data['use_digits'] = False
    await state.update_data(data)
    await message.reply("‚úÖ –ü–∞—Ä–æ–ª—å –Ω–µ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã", 
                        reply_markup=get_password_customization_keyboard())

async def process_special_option(message: types.Message, state: FSMContext):
    data = await state.get_data()
    data['use_special'] = True
    await state.update_data(data)
    await message.reply("‚úÖ –ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã", 
                        reply_markup=get_password_customization_keyboard())

async def process_no_special_option(message: types.Message, state: FSMContext):
    data = await state.get_data()
    data['use_special'] = False
    await state.update_data(data)
    await message.reply("‚úÖ –ü–∞—Ä–æ–ª—å –Ω–µ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã", 
                        reply_markup=get_password_customization_keyboard())

async def generate_custom_password(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Å–∏–º–≤–æ–ª–æ–≤ –±—ã–ª –≤–∫–ª—é—á–µ–Ω
    if not any([data.get('use_uppercase', True), 
               data.get('use_lowercase', True), 
               data.get('use_digits', True), 
               data.get('use_special', True)]):
        await message.reply(
            "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∫–ª—é—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=get_password_customization_keyboard()
        )
        return
    
    password = generate_password(
        length=data.get('length', 12),
        use_uppercase=data.get('use_uppercase', True),
        use_lowercase=data.get('use_lowercase', True),
        use_digits=data.get('use_digits', True),
        use_special=data.get('use_special', True)
    )
    
    content_description = []
    if data.get('use_uppercase', True):
        content_description.append("–∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã")
    if data.get('use_lowercase', True):
        content_description.append("—Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã")
    if data.get('use_digits', True):
        content_description.append("—Ü–∏—Ñ—Ä—ã")
    if data.get('use_special', True):
        content_description.append("—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
    
    content_text = ", ".join(content_description)
    
    await message.reply(
        f"üîë <b>–í–∞—à –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:</b>\n\n"
        f"<code>{password}</code>\n\n"
        f"–î–ª–∏–Ω–∞: {data.get('length', 12)} —Å–∏–º–≤–æ–ª–æ–≤\n"
        f"–°–æ–¥–µ—Ä–∂–∏—Ç: {content_text}",
        parse_mode=ParseMode.HTML,
        reply_markup=get_password_options_keyboard()
    )
    await state.clear()

def register_password_handlers(dp):
    dp.message.register(password_generator_start, lambda message: message.text == "üîë –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π")
    dp.message.register(generate_simple_password, lambda message: message.text == "–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å")
    dp.message.register(generate_complex_password, lambda message: message.text == "–°–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    dp.message.register(customize_password_start, lambda message: message.text == "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–æ–ª—å")
    
    dp.message.register(process_password_length, PasswordGenerator.waiting_for_length)
    
    dp.message.register(process_uppercase_option, 
                      PasswordGenerator.waiting_for_options, 
                      lambda message: message.text == "–° –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏")
    dp.message.register(process_no_uppercase_option, 
                      PasswordGenerator.waiting_for_options, 
                      lambda message: message.text == "–ë–µ–∑ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤")
    dp.message.register(process_digits_option, 
                      PasswordGenerator.waiting_for_options, 
                      lambda message: message.text == "–° —Ü–∏—Ñ—Ä–∞–º–∏")
    dp.message.register(process_no_digits_option, 
                      PasswordGenerator.waiting_for_options, 
                      lambda message: message.text == "–ë–µ–∑ —Ü–∏—Ñ—Ä")
    dp.message.register(process_special_option, 
                      PasswordGenerator.waiting_for_options, 
                      lambda message: message.text == "–°–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏")
    dp.message.register(process_no_special_option, 
                      PasswordGenerator.waiting_for_options, 
                      lambda message: message.text == "–ë–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤")
    dp.message.register(generate_custom_password, 
                      PasswordGenerator.waiting_for_options, 
                      lambda message: message.text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å")
    
    return dp 
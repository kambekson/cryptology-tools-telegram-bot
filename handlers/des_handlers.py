from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
from aiogram.enums import ParseMode

from keyboards import get_main_keyboard, get_encryption_keyboard
from states import DESCipher
from crypto_utils import generate_des_key, des_encrypt, des_decrypt

async def des_cipher_menu(message: types.Message, state: FSMContext):
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
    await state.clear()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(DESCipher.choosing_mode)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–ª—è DES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=get_encryption_keyboard())

async def des_generate_key(message: types.Message, state: FSMContext):
    key = generate_des_key()
    await message.reply(
        "üîë –í–∞—à DES –∫–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:\n"
        f"<code>{key}</code>\n\n"
        "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è!",
        parse_mode=ParseMode.HTML
    )
    await state.clear()
    await message.reply("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())

async def des_encryption_start(message: types.Message, state: FSMContext):
    await state.set_state(DESCipher.waiting_for_text_encrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=get_main_keyboard())

async def process_des_text_encrypt(message: types.Message, state: FSMContext):
    await state.update_data(des_text=message.text)
    await state.set_state(DESCipher.waiting_for_key_encrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ DES –∫–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")

async def process_des_key_encrypt(message: types.Message, state: FSMContext):
    key = message.text.strip()
    data = await state.get_data()
    text = data.get("des_text")
    result = des_encrypt(text, key)
    
    if result.startswith("–û—à–∏–±–∫–∞"):
        await message.reply(f"{result}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_main_keyboard())
    else:
        await message.reply(
            "‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω DES:\n"
            f"<code>{result}</code>",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_keyboard()
        )
    await state.clear()

async def des_decryption_start(message: types.Message, state: FSMContext):
    await state.set_state(DESCipher.waiting_for_text_decrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π DES —Ç–µ–∫—Å—Ç:", reply_markup=get_main_keyboard())

async def process_des_text_decrypt(message: types.Message, state: FSMContext):
    await state.update_data(des_text=message.text)
    await state.set_state(DESCipher.waiting_for_key_decrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ DES –∫–ª—é—á –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")

async def process_des_key_decrypt(message: types.Message, state: FSMContext):
    key = message.text.strip()
    data = await state.get_data()
    text = data.get("des_text")
    result = des_decrypt(text, key)
    
    if result.startswith("–û—à–∏–±–∫–∞"):
        await message.reply(f"{result}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_main_keyboard())
    else:
        await message.reply(
            "‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω DES:\n"
            f"{result}",
            reply_markup=get_main_keyboard()
        )
    await state.clear()

def register_des_handlers(dp):
    dp.message.register(des_cipher_menu, lambda message: message.text == "üîè DES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ")
    dp.message.register(des_generate_key, 
                       lambda message: message.text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á", 
                       StateFilter(DESCipher.choosing_mode))
    dp.message.register(des_encryption_start, 
                       lambda message: message.text == "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", 
                       StateFilter(DESCipher.choosing_mode))
    dp.message.register(process_des_text_encrypt, StateFilter(DESCipher.waiting_for_text_encrypt))
    dp.message.register(process_des_key_encrypt, StateFilter(DESCipher.waiting_for_key_encrypt))
    dp.message.register(des_decryption_start, 
                       lambda message: message.text == "–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", 
                       StateFilter(DESCipher.choosing_mode))
    dp.message.register(process_des_text_decrypt, StateFilter(DESCipher.waiting_for_text_decrypt))
    dp.message.register(process_des_key_decrypt, StateFilter(DESCipher.waiting_for_key_decrypt))
    
    return dp 
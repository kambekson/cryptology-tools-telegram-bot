from aiogram import types
from aiogram.filters import Command
from aiogram.enums import ParseMode

from keyboards import get_main_keyboard, get_range_keyboard
from crypto_utils import generate_random_prime

async def send_help(message: types.Message):
    await message.reply(
        "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "ü§ñ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª:\n"
        " - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ'\n"
        " - –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ &lt;min&gt;-&lt;max&gt;\n"
        " - –ë–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–ª—è –≤–∞—Å —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ\n\n"
        "üîê –§—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:\n"
        " - –®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è (–ø—Ä–æ—Å—Ç–æ–π —à–∏—Ñ—Ä —Å–¥–≤–∏–≥–∞)\n"
        " - –®–∏—Ñ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ (–í–∏–∂–µ–Ω–µ—Ä–∞)\n"
        " - RSA —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (–∞—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)\n"
        " - DES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–π –±–ª–æ—á–Ω—ã–π —à–∏—Ñ—Ä)\n"
        " - AES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–ª–æ—á–Ω—ã–π —à–∏—Ñ—Ä)\n\n"
        "üîë –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π:\n"
        " - –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–æ–ª–∏ (8 —Å–∏–º–≤–æ–ª–æ–≤, —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)\n"
        " - –°–ª–æ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ (16 —Å–∏–º–≤–æ–ª–æ–≤, –≤—Å–µ —Ç–∏–ø—ã —Å–∏–º–≤–æ–ª–æ–≤)\n"
        " - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–æ–ª–∏ —Å –≤—ã–±–æ—Ä–æ–º –¥–ª–∏–Ω—ã –∏ —Ç–∏–ø–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤\n\n"
        "üìù –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤",
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_keyboard()
    )

async def generate_prime_cmd(message: types.Message):
    try:
        args = message.text.split()[1:]
        if len(args) != 2:
            await message.reply(
                "–û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /prime &lt;min&gt; &lt;max&gt;",
                parse_mode=ParseMode.HTML,
                reply_markup=get_main_keyboard()
            )
            return
        min_value = int(args[0])
        max_value = int(args[1])
        await process_prime_generation(message, min_value, max_value)
    except ValueError:
        await message.reply(
            "–û—à–∏–±–∫–∞! –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏.",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        await message.reply(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_main_keyboard()
        )

async def process_prime_generation(message, min_value, max_value):
    if min_value <= 1:
        min_value = 2
    if min_value > max_value:
        await message.reply("–û—à–∏–±–∫–∞! –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ.",
                            reply_markup=get_main_keyboard())
        return
    if max_value > 10 ** 10:
        await message.reply("–û—à–∏–±–∫–∞! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 10^10.",
                            reply_markup=get_main_keyboard())
        return
    if max_value > 10 ** 7:
        await message.reply(
            "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∏—Å–ª–∞ –≤ –±–æ–ª—å—à–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            reply_markup=get_main_keyboard())
    await message.reply("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ...")
    prime_number = generate_random_prime(min_value, max_value)
    await message.reply(
        f"üî¢ –ü—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [{min_value}, {max_value}]:\n\n<b>{prime_number}</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_keyboard()
    )

async def button_generate_prime(message: types.Message):
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∏—Å–ª–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ &lt;min&gt;-&lt;max&gt;:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_range_keyboard()
    )

async def button_help(message: types.Message):
    await send_help(message)

async def process_range_selection(message: types.Message):
    range_parts = message.text.split('-')
    min_value = int(range_parts[0])
    max_value = int(range_parts[1])
    await process_prime_generation(message, min_value, max_value)

async def process_custom_range(message: types.Message):
    try:
        range_parts = message.text.split('-')
        min_value = int(range_parts[0])
        max_value = int(range_parts[1])
        await process_prime_generation(message, min_value, max_value)
    except ValueError:
        await message.reply(
            "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ &lt;min&gt;-&lt;max&gt;, –≥–¥–µ min –∏ max - —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_range_keyboard()
        )

def register_prime_handlers(dp):
    dp.message.register(generate_prime_cmd, Command("prime"))
    dp.message.register(button_generate_prime, lambda message: message.text == "üîç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ")
    dp.message.register(button_help, lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
    dp.message.register(process_range_selection, lambda message: message.text in [
        "100-1000", "1000-10000", "10000-100000", "100000-1000000",
        "1000000-10000000", "10000000-100000000"
    ])
    dp.message.register(process_custom_range, lambda message: '-' in message.text 
                        and len(message.text.split('-')) == 2 
                        and message.text[0].isdigit())
    
    return dp 
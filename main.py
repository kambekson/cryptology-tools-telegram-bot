import random
import asyncio
from Crypto.Cipher import AES, DES
from Crypto.PublicKey import RSA
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad
import base64
from Crypto.Cipher import PKCS1_OAEP
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.enums import ParseMode
from sympy import isprime

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext

API_TOKEN = '7089277164:AAHoJMAOSpMnD3-Pso90EKmEN9oj19e-FpQ'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()


# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –≥–¥–µ –∫–Ω–æ–ø–∫–∞ "‚ùì –ü–æ–º–æ—â—å" —Ç–µ–ø–µ—Ä—å –≤ –∫–æ–Ω—Ü–µ

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª)
def get_range_keyboard():
    builder = ReplyKeyboardBuilder()
    ranges = [
        "100-1000",
        "1000-10000",
        "10000-100000",
        "100000-1000000",
        "1000000-10000000",
        "10000000-100000000"
    ]
    for range_text in ranges:
        builder.add(KeyboardButton(text=range_text))
    builder.add(KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è"))
    builder.adjust(2, 2, 2, 1)
    return builder.as_markup(resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–µ–Ω—é —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
def get_caesar_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ"))
    builder.add(KeyboardButton(text="–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ"))
    builder.add(KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è"))
    builder.adjust(2, 1)
    return builder.as_markup(resize_keyboard=True)


def get_keyword_cipher_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ"))
    builder.add(KeyboardButton(text="–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ"))
    builder.add(KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è"))
    builder.adjust(2, 1)
    return builder.as_markup(resize_keyboard=True)

# 2. –î–û–ë–ê–í–ò–¢–¨ –í –°–ï–ö–¶–ò–Æ –ö–õ–ê–í–ò–ê–¢–£–† (–ø–æ—Å–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_keyword_cipher_keyboard())
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üîç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ"))
    builder.add(KeyboardButton(text="üîê –®–∏—Ñ—Ä —Ü–µ–∑–∞—Ä—è"))
    builder.add(KeyboardButton(text="üîë –®–∏—Ñ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞"))
    builder.add(KeyboardButton(text="üìù –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞"))
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è RSA, DES –∏ AES
    builder.add(KeyboardButton(text="üîí RSA —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ"))
    builder.add(KeyboardButton(text="üîè DES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ"))
    builder.add(KeyboardButton(text="üîê AES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ"))
    builder.add(KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=False)


def get_encryption_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ"))
    builder.add(KeyboardButton(text="–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ"))
    builder.add(KeyboardButton(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á"))
    builder.add(KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è"))
    builder.adjust(2, 2)
    return builder.as_markup(resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª
def generate_random_number(min_value, max_value):
    return random.randint(min_value, max_value)


def is_prime_rabin_miller(n):
    return isprime(n)


def generate_random_prime(min_value, max_value):
    while True:
        num = generate_random_number(min_value, max_value)
        if is_prime_rabin_miller(num):
            return num


# –§—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞
def caesar_encrypt_russian(text, key):
    result = ""
    alphabet_lower = "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
    alphabet_upper = "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
    for char in text:
        if char in alphabet_lower:
            idx = alphabet_lower.index(char)
            new_idx = (idx + key) % len(alphabet_lower)
            result += alphabet_lower[new_idx]
        elif char in alphabet_upper:
            idx = alphabet_upper.index(char)
            new_idx = (idx + key) % len(alphabet_upper)
            result += alphabet_upper[new_idx]
        else:
            result += char
    return result


def caesar_decrypt_russian(text, key):
    return caesar_encrypt_russian(text, -key)


def vigenere_encrypt_russian(text, keyword):
    result = ""
    alphabet_lower = "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
    alphabet_upper = "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
    keyword_lower = keyword.lower()
    j = 0
    for char in text:
        if char in alphabet_lower:
            shift = alphabet_lower.index(keyword_lower[j % len(keyword_lower)])
            idx = alphabet_lower.index(char)
            new_idx = (idx + shift) % len(alphabet_lower)
            result += alphabet_lower[new_idx]
            j += 1
        elif char in alphabet_upper:
            shift = alphabet_lower.index(keyword_lower[j % len(keyword_lower)])
            idx = alphabet_upper.index(char)
            new_idx = (idx + shift) % len(alphabet_upper)
            result += alphabet_upper[new_idx]
            j += 1
        else:
            result += char
    return result


def vigenere_decrypt_russian(text, keyword):
    result = ""
    alphabet_lower = "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
    alphabet_upper = "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
    keyword_lower = keyword.lower()
    j = 0
    for char in text:
        if char in alphabet_lower:
            shift = alphabet_lower.index(keyword_lower[j % len(keyword_lower)])
            idx = alphabet_lower.index(char)
            new_idx = (idx - shift) % len(alphabet_lower)
            result += alphabet_lower[new_idx]
            j += 1
        elif char in alphabet_upper:
            shift = alphabet_lower.index(keyword_lower[j % len(keyword_lower)])
            idx = alphabet_upper.index(char)
            new_idx = (idx - shift) % len(alphabet_upper)
            result += alphabet_upper[new_idx]
            j += 1
        else:
            result += char
    return result

# 4. –î–û–ë–ê–í–ò–¢–¨ –§–£–ù–ö–¶–ò–ò –®–ò–§–†–û–í–ê–ù–ò–Ø (–ø–æ—Å–ª–µ —Ñ—É–Ω–∫—Ü–∏–π vigenere_decrypt_russian())
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è RSA —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
def generate_rsa_keys():
    key = RSA.generate(2048)
    private_key = key.export_key().decode('utf-8')
    public_key = key.publickey().export_key().decode('utf-8')
    return private_key, public_key


def rsa_encrypt(message, public_key_str):
    try:
        public_key = RSA.import_key(public_key_str)
        cipher = PKCS1_OAEP.new(public_key)
        # –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä–∞–∑–¥–µ–ª—è–µ–º –∏—Ö –Ω–∞ —á–∞—Å—Ç–∏
        message_bytes = message.encode('utf-8')
        chunk_size = 200  # –†–∞–∑–º–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        encrypted = []
        
        for i in range(0, len(message_bytes), chunk_size):
            chunk = message_bytes[i:i+chunk_size]
            encrypted_chunk = cipher.encrypt(chunk)
            encrypted.append(base64.b64encode(encrypted_chunk).decode('utf-8'))
        
        return ":::".join(encrypted)
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"


def rsa_decrypt(encrypted_message, private_key_str):
    try:
        private_key = RSA.import_key(private_key_str)
        cipher = PKCS1_OAEP.new(private_key)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã
        encrypted_chunks = encrypted_message.split(":::")
        decrypted = []
        
        for chunk in encrypted_chunks:
            encrypted_bytes = base64.b64decode(chunk)
            decrypted_chunk = cipher.decrypt(encrypted_bytes)
            decrypted.append(decrypted_chunk)
        
        return b''.join(decrypted).decode('utf-8')
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è DES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
def generate_des_key():
    key = get_random_bytes(8)  # 8 –±–∞–π—Ç –¥–ª—è DES
    return base64.b64encode(key).decode('utf-8')


def des_encrypt(message, key_str):
    try:
        key = base64.b64decode(key_str)
        cipher = DES.new(key, DES.MODE_CBC)
        data = message.encode('utf-8')
        ct_bytes = cipher.encrypt(pad(data, DES.block_size))
        iv = base64.b64encode(cipher.iv).decode('utf-8')
        ct = base64.b64encode(ct_bytes).decode('utf-8')
        return f"{iv}:::{ct}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"


def des_decrypt(encrypted_message, key_str):
    try:
        key = base64.b64decode(key_str)
        iv, ct = encrypted_message.split(":::")
        iv = base64.b64decode(iv)
        ct = base64.b64decode(ct)
        cipher = DES.new(key, DES.MODE_CBC, iv)
        pt = unpad(cipher.decrypt(ct), DES.block_size)
        return pt.decode('utf-8')
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è AES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
def generate_aes_key():
    key = get_random_bytes(16)  # 16 –±–∞–π—Ç –¥–ª—è AES-128
    return base64.b64encode(key).decode('utf-8')


def aes_encrypt(message, key_str):
    try:
        key = base64.b64decode(key_str)
        cipher = AES.new(key, AES.MODE_CBC)
        data = message.encode('utf-8')
        ct_bytes = cipher.encrypt(pad(data, AES.block_size))
        iv = base64.b64encode(cipher.iv).decode('utf-8')
        ct = base64.b64encode(ct_bytes).decode('utf-8')
        return f"{iv}:::{ct}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"


def aes_decrypt(encrypted_message, key_str):
    try:
        key = base64.b64decode(key_str)
        iv, ct = encrypted_message.split(":::")
        iv = base64.b64decode(iv)
        ct = base64.b64decode(ct)
        cipher = AES.new(key, AES.MODE_CBC, iv)
        pt = unpad(cipher.decrypt(ct), AES.block_size)
        return pt.decode('utf-8')
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è (—Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–π –≤–≤–æ–¥)
class CaesarCipher(StatesGroup):
    choosing_mode = State()
    waiting_for_text_encrypt = State()
    waiting_for_key_encrypt = State()
    waiting_for_text_decrypt = State()
    waiting_for_key_decrypt = State()


# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —à–∏—Ñ—Ä–∞ —Å –∫–æ–¥–æ–≤—ã–º —Å–ª–æ–≤–æ–º (—Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–π –≤–≤–æ–¥)
class KeywordCipher(StatesGroup):
    choosing_mode = State()
    waiting_for_text_encrypt = State()
    waiting_for_keyword_encrypt = State()
    waiting_for_text_decrypt = State()
    waiting_for_keyword_decrypt = State()


# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
class TextAnalyzer(StatesGroup):
    waiting_for_text = State()

# 3. –î–û–ë–ê–í–ò–¢–¨ –ö–õ–ê–°–°–´ –°–û–°–¢–û–Ø–ù–ò–ô (–ø–æ—Å–ª–µ –∫–ª–∞—Å—Å–∞ TextAnalyzer)
# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è RSA —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
class RSACipher(StatesGroup):
    choosing_mode = State()
    generating_keys = State()
    waiting_for_text_encrypt = State()
    waiting_for_key_encrypt = State()
    waiting_for_text_decrypt = State()
    waiting_for_key_decrypt = State()


# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è DES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
class DESCipher(StatesGroup):
    choosing_mode = State()
    generating_key = State()
    waiting_for_text_encrypt = State()
    waiting_for_key_encrypt = State()
    waiting_for_text_decrypt = State()
    waiting_for_key_decrypt = State()


# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è AES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
class AESCipher(StatesGroup):
    choosing_mode = State()
    generating_key = State()
    waiting_for_text_encrypt = State()
    waiting_for_key_encrypt = State()
    waiting_for_text_decrypt = State()
    waiting_for_key_decrypt = State()
# 5. –î–û–ë–ê–í–ò–¢–¨ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò RSA (–ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º @dp.message())
# ------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è RSA —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è ------------------
@dp.message(lambda message: message.text == "üîí RSA —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ")
async def rsa_cipher_menu(message: types.Message, state: FSMContext):
    await state.set_state(RSACipher.choosing_mode)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–ª—è RSA —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=get_encryption_keyboard())


@dp.message(lambda message: message.text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á", StateFilter(RSACipher.choosing_mode))
async def rsa_generate_keys(message: types.Message, state: FSMContext):
    await message.reply("–ì–µ–Ω–µ—Ä–∏—Ä—É—é RSA –∫–ª—é—á–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    private_key, public_key = generate_rsa_keys()
    
    await message.reply(
        "üîë –í–∞—à–∏ RSA –∫–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:\n\n"
        "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (—Ö—Ä–∞–Ω–∏—Ç–µ –≤ —Ç–∞–π–Ω–µ!):\n"
        f"<code>{private_key}</code>\n\n"
        "–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á (–¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è):\n"
        f"<code>{public_key}</code>",
        parse_mode=ParseMode.HTML
    )
    await state.clear()
    await message.reply("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())


@dp.message(lambda message: message.text == "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", StateFilter(RSACipher.choosing_mode))
async def rsa_encryption_start(message: types.Message, state: FSMContext):
    await state.set_state(RSACipher.waiting_for_text_encrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=get_main_keyboard())


@dp.message(StateFilter(RSACipher.waiting_for_text_encrypt))
async def process_rsa_text_encrypt(message: types.Message, state: FSMContext):
    await state.update_data(rsa_text=message.text)
    await state.set_state(RSACipher.waiting_for_key_encrypt)
    await message.reply(
        "–í–≤–µ–¥–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á RSA –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:\n"
        "(–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -----BEGIN PUBLIC KEY-----)"
    )


@dp.message(StateFilter(RSACipher.waiting_for_key_encrypt))
async def process_rsa_key_encrypt(message: types.Message, state: FSMContext):
    public_key = message.text.strip()
    data = await state.get_data()
    text = data.get("rsa_text")
    result = rsa_encrypt(text, public_key)
    
    if result.startswith("–û—à–∏–±–∫–∞"):
        await message.reply(f"{result}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_main_keyboard())
    else:
        await message.reply(
            "‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω RSA:\n"
            f"<code>{result}</code>",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_keyboard()
        )
    await state.clear()


@dp.message(lambda message: message.text == "–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", StateFilter(RSACipher.choosing_mode))
async def rsa_decryption_start(message: types.Message, state: FSMContext):
    await state.set_state(RSACipher.waiting_for_text_decrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π RSA —Ç–µ–∫—Å—Ç:", reply_markup=get_main_keyboard())


@dp.message(StateFilter(RSACipher.waiting_for_text_decrypt))
async def process_rsa_text_decrypt(message: types.Message, state: FSMContext):
    await state.update_data(rsa_text=message.text)
    await state.set_state(RSACipher.waiting_for_key_decrypt)
    await message.reply(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á RSA –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:\n"
        "(–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -----BEGIN RSA PRIVATE KEY-----)"
    )


@dp.message(StateFilter(RSACipher.waiting_for_key_decrypt))
async def process_rsa_key_decrypt(message: types.Message, state: FSMContext):
    private_key = message.text.strip()
    data = await state.get_data()
    text = data.get("rsa_text")
    result = rsa_decrypt(text, private_key)
    
    if result.startswith("–û—à–∏–±–∫–∞"):
        await message.reply(f"{result}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_main_keyboard())
    else:
        await message.reply(
            "‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω RSA:\n"
            f"{result}",
            reply_markup=get_main_keyboard()
        )
    await state.clear()


# ------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è DES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è ------------------
@dp.message(lambda message: message.text == "üîè DES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ")
async def des_cipher_menu(message: types.Message, state: FSMContext):
    await state.set_state(DESCipher.choosing_mode)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–ª—è DES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=get_encryption_keyboard())


@dp.message(lambda message: message.text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á", StateFilter(DESCipher.choosing_mode))
async def des_generate_key(message: types.Message, state: FSMContext):
    key = generate_des_key()
    await message.reply(
        "üîë –í–∞—à DES –∫–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:\n"
        f"<code>{key}</code>\n\n"
        "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è!",
        parse_mode=ParseMode.HTML
    )
    await state.clear()
    await message.reply("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())


@dp.message(lambda message: message.text == "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", StateFilter(DESCipher.choosing_mode))
async def des_encryption_start(message: types.Message, state: FSMContext):
    await state.set_state(DESCipher.waiting_for_text_encrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=get_main_keyboard())


@dp.message(StateFilter(DESCipher.waiting_for_text_encrypt))
async def process_des_text_encrypt(message: types.Message, state: FSMContext):
    await state.update_data(des_text=message.text)
    await state.set_state(DESCipher.waiting_for_key_encrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ DES –∫–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")


@dp.message(StateFilter(DESCipher.waiting_for_key_encrypt))
async def process_des_key_encrypt(message: types.Message, state: FSMContext):
    key = message.text.strip()
    data = await state.get_data()
    text = data.get("des_text")
    result = des_encrypt(text, key)
    
    if result.startswith("–û—à–∏–±–∫–∞"):
        await message.reply(f"{result}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_main_keyboard())
    else:
        await message.reply(
            "‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω DES:\n"
            f"<code>{result}</code>",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_keyboard()
        )
    await state.clear()


@dp.message(lambda message: message.text == "–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", StateFilter(DESCipher.choosing_mode))
async def des_decryption_start(message: types.Message, state: FSMContext):
    await state.set_state(DESCipher.waiting_for_text_decrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π DES —Ç–µ–∫—Å—Ç:", reply_markup=get_main_keyboard())


@dp.message(StateFilter(DESCipher.waiting_for_text_decrypt))
async def process_des_text_decrypt(message: types.Message, state: FSMContext):
    await state.update_data(des_text=message.text)
    await state.set_state(DESCipher.waiting_for_key_decrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ DES –∫–ª—é—á –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")


@dp.message(StateFilter(DESCipher.waiting_for_key_decrypt))
async def process_des_key_decrypt(message: types.Message, state: FSMContext):
    key = message.text.strip()
    data = await state.get_data()
    text = data.get("des_text")
    result = des_decrypt(text, key)
    
    if result.startswith("–û—à–∏–±–∫–∞"):
        await message.reply(f"{result}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_main_keyboard())
    else:
        await message.reply(
            "‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω DES:\n"
            f"{result}",
            reply_markup=get_main_keyboard()
        )
    await state.clear()


# ------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è AES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è ------------------
@dp.message(lambda message: message.text == "üîê AES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ")
async def aes_cipher_menu(message: types.Message, state: FSMContext):
    await state.set_state(AESCipher.choosing_mode)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–ª—è AES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=get_encryption_keyboard())


@dp.message(lambda message: message.text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á", StateFilter(AESCipher.choosing_mode))
async def aes_generate_key(message: types.Message, state: FSMContext):
    key = generate_aes_key()
    await message.reply(
        "üîë –í–∞—à AES –∫–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:\n"
        f"<code>{key}</code>\n\n"
        "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è!",
        parse_mode=ParseMode.HTML
    )
    await state.clear()
    await message.reply("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())


@dp.message(lambda message: message.text == "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", StateFilter(AESCipher.choosing_mode))
async def aes_encryption_start(message: types.Message, state: FSMContext):
    await state.set_state(AESCipher.waiting_for_text_encrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=get_main_keyboard())


@dp.message(StateFilter(AESCipher.waiting_for_text_encrypt))
async def process_aes_text_encrypt(message: types.Message, state: FSMContext):
    await state.update_data(aes_text=message.text)
    await state.set_state(AESCipher.waiting_for_key_encrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ AES –∫–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")


@dp.message(StateFilter(AESCipher.waiting_for_key_encrypt))
async def process_aes_key_encrypt(message: types.Message, state: FSMContext):
    key = message.text.strip()
    data = await state.get_data()
    text = data.get("aes_text")
    result = aes_encrypt(text, key)
    
    if result.startswith("–û—à–∏–±–∫–∞"):
        await message.reply(f"{result}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_main_keyboard())
    else:
        await message.reply(
            "‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω AES:\n"
            f"<code>{result}</code>",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_keyboard()
        )
    await state.clear()


@dp.message(lambda message: message.text == "–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", StateFilter(AESCipher.choosing_mode))
async def aes_decryption_start(message: types.Message, state: FSMContext):
    await state.set_state(AESCipher.waiting_for_text_decrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π AES —Ç–µ–∫—Å—Ç:", reply_markup=get_main_keyboard())


@dp.message(StateFilter(AESCipher.waiting_for_text_decrypt))
async def process_aes_text_decrypt(message: types.Message, state: FSMContext):
    await state.update_data(aes_text=message.text)
    await state.set_state(AESCipher.waiting_for_key_decrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ AES –∫–ª—é—á –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")


@dp.message(StateFilter(AESCipher.waiting_for_key_decrypt))
async def process_aes_key_decrypt(message: types.Message, state: FSMContext):
    key = message.text.strip()
    data = await state.get_data()
    text = data.get("aes_text")
    result = aes_decrypt(text, key)
    
    if result.startswith("–û—à–∏–±–∫–∞"):
        await message.reply(f"{result}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_main_keyboard())
    else:
        await message.reply(
            "‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω AES:\n"
            f"{result}",
            reply_markup=get_main_keyboard()
        )
    await state.clear()
# ------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª ------------------

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /prime &lt;min&gt; &lt;max&gt; –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∏—Å–ª–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.",
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_keyboard()
    )


# 6. –û–ë–ù–û–í–ò–¢–¨ HELP –°–û–û–ë–©–ï–ù–ò–ï (–≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_help)
@dp.message(Command("help"))
async def send_help(message: types.Message):
    await message.reply(
        "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "ü§ñ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª:\n"
        " - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ'\n"
        " - –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ &lt;min&gt;-&lt;max&gt;\n"
        " - –ë–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–ª—è –≤–∞—Å —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ\n\n"
        "üîê –§—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:\n"
        " - –®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è (–ø—Ä–æ—Å—Ç–æ–π —à–∏—Ñ—Ä —Å–¥–≤–∏–≥–∞)\n"
        " - –®–∏—Ñ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ (–í–∏–∂–µ–Ω–µ—Ä–∞)\n"
        " - RSA —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (–∞—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)\n"
        " - DES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–π –±–ª–æ—á–Ω—ã–π —à–∏—Ñ—Ä)\n"
        " - AES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–ª–æ—á–Ω—ã–π —à–∏—Ñ—Ä)\n\n"
        "üìù –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤",
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_keyboard()
    )


@dp.message(Command("prime"))
async def generate_prime_cmd(message: types.Message):
    try:
        args = message.text.split()[1:]
        if len(args) != 2:
            await message.reply(
                "–û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /prime &lt;min&gt; &lt;max&gt;",
                parse_mode=ParseMode.HTML,
                reply_markup=get_main_keyboard()
            )
            return
        min_value = int(args[0])
        max_value = int(args[1])
        await process_prime_generation(message, min_value, max_value)
    except ValueError:
        await message.reply(
            "–û—à–∏–±–∫–∞! –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏.",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        await message.reply(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_main_keyboard()
        )


async def process_prime_generation(message, min_value, max_value):
    if min_value <= 1:
        min_value = 2
    if min_value > max_value:
        await message.reply("–û—à–∏–±–∫–∞! –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ.",
                            reply_markup=get_main_keyboard())
        return
    if max_value > 10 ** 10:
        await message.reply("–û—à–∏–±–∫–∞! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 10^10.",
                            reply_markup=get_main_keyboard())
        return
    if max_value > 10 ** 7:
        await message.reply(
            "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∏—Å–ª–∞ –≤ –±–æ–ª—å—à–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            reply_markup=get_main_keyboard())
    await message.reply("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ...")
    prime_number = generate_random_prime(min_value, max_value)
    await message.reply(
        f"üî¢ –ü—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [{min_value}, {max_value}]:\n\n<b>{prime_number}</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_keyboard()
    )


@dp.message(lambda message: message.text == "üîç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ")
async def button_generate_prime(message: types.Message):
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∏—Å–ª–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ &lt;min&gt;-&lt;max&gt;:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_range_keyboard()
    )


@dp.message(lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
async def button_help(message: types.Message):
    await send_help(message)


@dp.message(lambda message: message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è")
async def button_back(message: types.Message, state: FSMContext):
    await state.clear()
    await message.reply("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())


@dp.message(lambda message: message.text in ["100-1000", "1000-10000", "10000-100000", "100000-1000000",
                                             "1000000-10000000", "10000000-100000000"])
async def process_range_selection(message: types.Message):
    range_parts = message.text.split('-')
    min_value = int(range_parts[0])
    max_value = int(range_parts[1])
    await process_prime_generation(message, min_value, max_value)


@dp.message(lambda message: '-' in message.text and len(message.text.split('-')) == 2)
async def process_custom_range(message: types.Message):
    try:
        range_parts = message.text.split('-')
        min_value = int(range_parts[0])
        max_value = int(range_parts[1])
        await process_prime_generation(message, min_value, max_value)
    except ValueError:
        await message.reply(
            "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ &lt;min&gt;-&lt;max&gt;, –≥–¥–µ min –∏ max - —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_range_keyboard()
        )


# ------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è (—Ä—É—Å—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–π –≤–≤–æ–¥) ------------------

@dp.message(lambda message: message.text == "üîê –®–∏—Ñ—Ä —Ü–µ–∑–∞—Ä—è")
async def caesar_cipher_menu(message: types.Message, state: FSMContext):
    await state.set_state(CaesarCipher.choosing_mode)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–ª—è —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è:", reply_markup=get_caesar_keyboard())


@dp.message(lambda message: message.text == "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", StateFilter(CaesarCipher.choosing_mode))
async def caesar_encryption_start(message: types.Message, state: FSMContext):
    await state.set_state(CaesarCipher.waiting_for_text_encrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ):", reply_markup=get_main_keyboard())


@dp.message(StateFilter(CaesarCipher.waiting_for_text_encrypt))
async def process_caesar_text_encrypt(message: types.Message, state: FSMContext):
    await state.update_data(caesar_text=message.text)
    await state.set_state(CaesarCipher.waiting_for_key_encrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –∫–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")


@dp.message(StateFilter(CaesarCipher.waiting_for_key_encrypt))
async def process_caesar_key_encrypt(message: types.Message, state: FSMContext):
    try:
        key = int(message.text.strip())
        data = await state.get_data()
        text = data.get("caesar_text")
        result = caesar_encrypt_russian(text, key)
        await message.reply(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {result}", reply_markup=get_main_keyboard())
    except ValueError:
        await message.reply("–û—à–∏–±–∫–∞! –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    await state.clear()


@dp.message(lambda message: message.text == "–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", StateFilter(CaesarCipher.choosing_mode))
async def caesar_decryption_start(message: types.Message, state: FSMContext):
    await state.set_state(CaesarCipher.waiting_for_text_decrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ):", reply_markup=get_main_keyboard())


@dp.message(StateFilter(CaesarCipher.waiting_for_text_decrypt))
async def process_caesar_text_decrypt(message: types.Message, state: FSMContext):
    await state.update_data(caesar_text=message.text)
    await state.set_state(CaesarCipher.waiting_for_key_decrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –∫–ª—é—á –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")


@dp.message(StateFilter(CaesarCipher.waiting_for_key_decrypt))
async def process_caesar_key_decrypt(message: types.Message, state: FSMContext):
    try:
        key = int(message.text.strip())
        data = await state.get_data()
        text = data.get("caesar_text")
        result = caesar_decrypt_russian(text, key)
        await message.reply(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {result}", reply_markup=get_main_keyboard())
    except ValueError:
        await message.reply("–û—à–∏–±–∫–∞! –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    await state.clear()


# ------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —à–∏—Ñ—Ä–∞ —Å –∫–æ–¥–æ–≤—ã–º —Å–ª–æ–≤–æ–º (—Ä—É—Å—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–π –≤–≤–æ–¥) ------------------

@dp.message(lambda message: message.text == "üîë –®–∏—Ñ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞")
async def keyword_cipher_menu(message: types.Message, state: FSMContext):
    await state.set_state(KeywordCipher.choosing_mode)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–ª—è —à–∏—Ñ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞:",
                        reply_markup=get_keyword_cipher_keyboard())


@dp.message(lambda message: message.text == "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", StateFilter(KeywordCipher.choosing_mode))
async def keyword_encryption_start(message: types.Message, state: FSMContext):
    await state.set_state(KeywordCipher.waiting_for_text_encrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ):", reply_markup=get_main_keyboard())


@dp.message(StateFilter(KeywordCipher.waiting_for_text_encrypt))
async def process_keyword_text_encrypt(message: types.Message, state: FSMContext):
    await state.update_data(keyword_text=message.text)
    await state.set_state(KeywordCipher.waiting_for_keyword_encrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")


@dp.message(StateFilter(KeywordCipher.waiting_for_keyword_encrypt))
async def process_keyword_encrypt(message: types.Message, state: FSMContext):
    keyword = message.text.strip()
    data = await state.get_data()
    text = data.get("keyword_text")
    result = vigenere_encrypt_russian(text, keyword)
    await message.reply(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {result}", reply_markup=get_main_keyboard())
    await state.clear()


@dp.message(lambda message: message.text == "–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", StateFilter(KeywordCipher.choosing_mode))
async def keyword_decryption_start(message: types.Message, state: FSMContext):
    await state.set_state(KeywordCipher.waiting_for_text_decrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ):", reply_markup=get_main_keyboard())


@dp.message(StateFilter(KeywordCipher.waiting_for_text_decrypt))
async def process_keyword_text_decrypt(message: types.Message, state: FSMContext):
    await state.update_data(keyword_text=message.text)
    await state.set_state(KeywordCipher.waiting_for_keyword_decrypt)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")


@dp.message(StateFilter(KeywordCipher.waiting_for_keyword_decrypt))
async def process_keyword_decrypt(message: types.Message, state: FSMContext):
    keyword = message.text.strip()
    data = await state.get_data()
    text = data.get("keyword_text")
    result = vigenere_decrypt_russian(text, keyword)
    await message.reply(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {result}", reply_markup=get_main_keyboard())
    await state.clear()


# ------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ ------------------

@dp.message(lambda message: message.text == "üìù –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞")
async def text_analyzer_start(message: types.Message, state: FSMContext):
    await state.set_state(TextAnalyzer.waiting_for_text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=get_main_keyboard())


@dp.message(StateFilter(TextAnalyzer.waiting_for_text))
async def process_text_analysis(message: types.Message, state: FSMContext):
    text = message.text
    words = text.split()
    word_count = len(words)

    letter_total = 0
    digit_total = 0
    special_total = 0
    letter_count = {}
    digit_count = {}
    special_count = {}

    for char in text:
        if char.isalpha():
            letter_total += 1
            char_lower = char.lower()
            letter_count[char_lower] = letter_count.get(char_lower, 0) + 1
        elif char.isdigit():
            digit_total += 1
            digit_count[char] = digit_count.get(char, 0) + 1
        elif not char.isspace():
            special_total += 1
            special_count[char] = special_count.get(char, 0) + 1

    letter_freq = "\n".join([f"{letter}: {count}" for letter, count in sorted(letter_count.items())])
    digit_freq = "\n".join([f"{digit}: {count}" for digit, count in sorted(digit_count.items())])
    special_freq = "\n".join([f"{symbol}: {count}" for symbol, count in sorted(special_count.items())])

    result = (
        "üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞:\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {word_count}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤: {letter_total}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä: {digit_total}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤: {special_total}\n\n"
        "–ß–∞—Å—Ç–æ—Ç–∞ –±—É–∫–≤:\n"
        f"{letter_freq}\n\n"
        "–ß–∞—Å—Ç–æ—Ç–∞ —Ü–∏—Ñ—Ä:\n"
        f"{digit_freq}\n"
        "–ß–∞—Å—Ç–æ—Ç–∞ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤:\n"
        f"{special_freq}"
    )
    await message.reply(result, reply_markup=get_main_keyboard())
    await state.clear()


# ------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ------------------

@dp.message()
async def echo_all(message: types.Message):
    await message.reply(
        "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.",
        reply_markup=get_main_keyboard())


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    asyncio.run(main())
